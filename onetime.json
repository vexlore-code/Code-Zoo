{
  "Vexlore C++ Template": {
    "prefix": "cc",
    "body": [
      "/*",
      "         Author: Munna",
      "         Created: ${CURRENT_DATE}-${CURRENT_MONTH}-${CURRENT_YEAR} ${CURRENT_HOUR}:${CURRENT_MINUTE}:${CURRENT_SECOND}",
      "*/",
      "",
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "#define fastIO ios::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);",
      "#define int long long",
      "#define endl '\\n'",
      "",
      "const int MOD = 1e9+7, INF = 1e18, N = 2e5+5;",
      "",
      "typedef vector<int> vi;",
      "typedef pair<int, int> pii;",
      "typedef vector<pii> vpi;",
      "/*",
      " ═══════════════════════════════════ MAIN CODE ═══════════════════════════════════ ",
      "*/",
      "signed main()",
      "{",
      "    fastIO;",
      "    $0",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Vexlore fast C++ template by Munna with typedefs and macros"
  },

  "Linear Search": {
    "prefix": "linearsearch",
    "body": [
      "void linearSearch(vector<int> &arr, int key)",
      "{",
      "    for (int i = 0; i < arr.size(); i++)",
      "    {",
      "        if (arr[i] == key)",
      "        {",
      "            cout << \"Linear Search: Found at index \" << i << \"\\n\";",
      "            return;",
      "        }",
      "    }",
      "    cout << \"Linear Search: Not found\\n\";",
      "}"
    ],
    "description": "Linear search in vector"
  },

  "Binary Search": {
    "prefix": "binarysearch",
    "body": [
      "void binarySearchFunc(vector<int> &arr, int key)",
      "{",
      "    int l = 0, r = arr.size() - 1;",
      "    while (l <= r)",
      "    {",
      "        int mid = l + (r - l) / 2;",
      "        if (arr[mid] == key)",
      "        {",
      "            cout << \"Binary Search: Found at index \" << mid << \"\\n\";",
      "            return;",
      "        }",
      "        else if (arr[mid] < key) l = mid + 1;",
      "        else r = mid - 1;",
      "    }",
      "    cout << \"Binary Search: Not found\\n\";",
      "}"
    ],
    "description": "Binary search in sorted vector"
  },

  "Merge Sort": {
    "prefix": "mergesort",
    "body": [
      "void mergeArr(vector<int> &arr, int l, int mid, int r)",
      "{",
      "    vector<int> L(arr.begin() + l, arr.begin() + mid + 1);",
      "    vector<int> R(arr.begin() + mid + 1, arr.begin() + r + 1);",
      "    int i = 0, j = 0, k = l;",
      "    while (i < L.size() && j < R.size())",
      "    {",
      "        if (L[i] <= R[j]) arr[k++] = L[i++];",
      "        else arr[k++] = R[j++];",
      "    }",
      "    while (i < L.size()) arr[k++] = L[i++];",
      "    while (j < R.size()) arr[k++] = R[j++];",
      "}",
      "",
      "void mergeSort(vector<int> &arr, int l, int r)",
      "{",
      "    if (l < r)",
      "    {",
      "        int mid = (l + r) / 2;",
      "        mergeSort(arr, l, mid);",
      "        mergeSort(arr, mid + 1, r);",
      "        mergeArr(arr, l, mid, r);",
      "    }",
      "}"
    ],
    "description": "Merge sort implementation"
  },

  "Linked List": {
    "prefix": "linkedlist",
    "body": [
      "struct Node",
      "{",
      "    int data;",
      "    Node* next;",
      "    Node(int val) : data(val), next(NULL) {}",
      "};",
      "",
      "void printList(Node* head)",
      "{",
      "    while (head)",
      "    {",
      "        cout << head->data << \" -> \";",
      "        head = head->next;",
      "    }",
      "    cout << \"NULL\\n\";",
      "}"
    ],
    "description": "Singly linked list node struct and print function"
  },

  "Map Example": {
    "prefix": "mapexample",
    "body": [
      "void mapExample()",
      "{",
      "    map<string, int> mp;",
      "    mp[\"Alice\"] = 25;",
      "    mp[\"Bob\"] = 30;",
      "    mp[\"Charlie\"] = 20;",
      "    cout << \"\\nMap contents:\\n\";",
      "    for (auto &p : mp) cout << p.first << \": \" << p.second << \"\\n\";",
      "}"
    ],
    "description": "Map example with string keys and int values"
  },

  "Stack Example": {
    "prefix": "stackexample",
    "body": [
      "void stackExample()",
      "{",
      "    stack<int> st;",
      "    st.push(10); st.push(20); st.push(30);",
      "    cout << \"\\nStack top: \" << st.top() << \"\\n\"; st.pop();",
      "    cout << \"Stack new top: \" << st.top() << \"\\n\";",
      "}"
    ],
    "description": "Stack usage example"
  },

  "Queue Example": {
    "prefix": "queueexample",
    "body": [
      "void queueExample()",
      "{",
      "    queue<int> q;",
      "    q.push(1); q.push(2); q.push(3);",
      "    cout << \"\\nQueue front: \" << q.front() << \"\\n\"; q.pop();",
      "    cout << \"Queue new front: \" << q.front() << \"\\n\";",
      "}"
    ],
    "description": "Queue usage example"
  },

  "Vector Example": {
    "prefix": "vectorexample",
    "body": [
      "void vectorExample()",
      "{",
      "    vector<int> vec = {5, 2, 9, 1, 6};",
      "    cout << \"Original Vector: \";",
      "    for (int x : vec) cout << x << \" \";",
      "    cout << \"\\n\";",
      "",
      "    mergeSort(vec, 0, vec.size() - 1);",
      "    cout << \"Sorted Vector: \";",
      "    for (int x : vec) cout << x << \" \";",
      "    cout << \"\\n\";",
      "",
      "    int key = 6;",
      "    linearSearch(vec, key);",
      "    binarySearchFunc(vec, key);",
      "}"
    ],
    "description": "Vector example with sorting and searching"
  },



















  
  "Search Linear": {
    "prefix": "search.linear",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int linearSearch(const vector<int>& arr, int target)",
      "{",
      "    for (int i = 0; i < (int)arr.size(); i++)",
      "    {",
      "        if (arr[i] == target) return i;",
      "    }",
      "    return -1;",
      "}",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    vector<int> arr(n);",
      "    for (int i = 0; i < n; i++) cin >> arr[i];",
      "    int target; cin >> target;",
      "    cout << \"Linear Search Index: \" << linearSearch(arr, target) << '\\n';",
      "    return 0;",
      "}"
    ],
    "description": "Linear Search with user input"
  },

  "Search Binary": {
    "prefix": "search.binary",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int binarySearch(const vector<int>& arr, int target)",
      "{",
      "    int left = 0, right = (int)arr.size() - 1;",
      "    while (left <= right)",
      "    {",
      "        int mid = left + (right - left) / 2;",
      "        if (arr[mid] == target) return mid;",
      "        else if (arr[mid] < target) left = mid + 1;",
      "        else right = mid - 1;",
      "    }",
      "    return -1;",
      "}",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    vector<int> arr(n);",
      "    for (int i = 0; i < n; i++) cin >> arr[i];",
      "    int target; cin >> target;",
      "    sort(arr.begin(), arr.end());",
      "    cout << \"Binary Search Index: \" << binarySearch(arr, target) << '\\n';",
      "    return 0;",
      "}"
    ],
    "description": "Binary Search with user input"
  },

  "Sort MergeSort": {
    "prefix": "sort.mergesort",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "void merge(vector<int>& arr, int left, int mid, int right)",
      "{",
      "    int n1 = mid - left + 1, n2 = right - mid;",
      "    vector<int> L(n1), R(n2);",
      "    for (int i = 0; i < n1; i++) L[i] = arr[left + i];",
      "    for (int j = 0; j < n2; j++) R[j] = arr[mid + 1 + j];",
      "    int i = 0, j = 0, k = left;",
      "    while (i < n1 && j < n2)",
      "    {",
      "        if (L[i] <= R[j]) arr[k++] = L[i++];",
      "        else arr[k++] = R[j++];",
      "    }",
      "    while (i < n1) arr[k++] = L[i++];",
      "    while (j < n2) arr[k++] = R[j++];",
      "}",
      "",
      "void mergeSort(vector<int>& arr, int left, int right)",
      "{",
      "    if (left >= right) return;",
      "    int mid = left + (right - left) / 2;",
      "    mergeSort(arr, left, mid);",
      "    mergeSort(arr, mid + 1, right);",
      "    merge(arr, left, mid, right);",
      "}",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    vector<int> arr(n);",
      "    for (int i = 0; i < n; i++) cin >> arr[i];",
      "    mergeSort(arr, 0, n - 1);",
      "    for (auto x : arr) cout << x << ' ';",
      "    cout << '\\n';",
      "    return 0;",
      "}"
    ],
    "description": "Merge Sort with user input"
  },

  "LinkedList Singly": {
    "prefix": "list.singly",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "struct Node",
      "{",
      "    int data;",
      "    Node *next;",
      "    Node(int val) : data(val), next(nullptr) {}",
      "};",
      "",
      "class LinkedList",
      "{",
      "    Node *head;",
      "public:",
      "    LinkedList() : head(nullptr) {}",
      "",
      "    void insertAtHead(int val)",
      "    {",
      "        Node *newNode = new Node(val);",
      "        newNode->next = head;",
      "        head = newNode;",
      "    }",
      "",
      "    void insertAtTail(int val)",
      "    {",
      "        Node *newNode = new Node(val);",
      "        if (!head)",
      "        {",
      "            head = newNode;",
      "            return;",
      "        }",
      "        Node *temp = head;",
      "        while (temp->next) temp = temp->next;",
      "        temp->next = newNode;",
      "    }",
      "",
      "    void deleteValue(int val)",
      "    {",
      "        if (!head) return;",
      "        if (head->data == val)",
      "        {",
      "            Node *toDelete = head;",
      "            head = head->next;",
      "            delete toDelete;",
      "            return;",
      "        }",
      "        Node *temp = head;",
      "        while (temp->next && temp->next->data != val) temp = temp->next;",
      "        if (temp->next)",
      "        {",
      "            Node *toDelete = temp->next;",
      "            temp->next = temp->next->next;",
      "            delete toDelete;",
      "        }",
      "    }",
      "",
      "    void printList()",
      "    {",
      "        Node *temp = head;",
      "        while (temp)",
      "        {",
      "            cout << temp->data << \" -> \";",
      "            temp = temp->next;",
      "        }",
      "        cout << \"NULL\\n\";",
      "    }",
      "",
      "    ~LinkedList()",
      "    {",
      "        while (head)",
      "        {",
      "            Node *temp = head;",
      "            head = head->next;",
      "            delete temp;",
      "        }",
      "    }",
      "};",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    LinkedList ll;",
      "    int q; cin >> q;",
      "    while (q--)",
      "    {",
      "        string op; int val;",
      "        cin >> op;",
      "        if (op == \"insert_head\")",
      "        {",
      "            cin >> val;",
      "            ll.insertAtHead(val);",
      "        }",
      "        else if (op == \"insert_tail\")",
      "        {",
      "            cin >> val;",
      "            ll.insertAtTail(val);",
      "        }",
      "        else if (op == \"delete\")",
      "        {",
      "            cin >> val;",
      "            ll.deleteValue(val);",
      "        }",
      "        else if (op == \"print\")",
      "        {",
      "            ll.printList();",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "Singly Linked List with insert/delete/print input commands"
  },

  "Vector Basic": {
    "prefix": "vector.basic",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    vector<int> v;",
      "    for (int i = 0; i < n; i++)",
      "    {",
      "        int x; cin >> x;",
      "        v.push_back(x);",
      "    }",
      "    int ins_beg; cin >> ins_beg;",
      "    v.insert(v.begin(), ins_beg);",
      "    if ((int)v.size() >= 2) v.erase(v.begin() + 1);",
      "    int new_size; cin >> new_size;",
      "    v.resize(new_size);",
      "    for (auto &x : v) cout << x << ' ';",
      "    cout << '\\n';",
      "    cout << \"First: \" << v.front() << \", Last: \" << v.back() << '\\n';",
      "    return 0;",
      "}"
    ],
    "description": "Vector insert, erase, resize, print with user input"
  },

  "Map Basic": {
    "prefix": "map.basic",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    map<string,int> mp;",
      "    for (int i = 0; i < n; i++)",
      "    {",
      "        string key; int val;",
      "        cin >> key >> val;",
      "        mp[key] = val;",
      "    }",
      "    string find_key; cin >> find_key;",
      "    if (mp.find(find_key) != mp.end()) cout << find_key << \": \" << mp[find_key] << '\\n';",
      "    else cout << find_key << \" not found\\n\";",
      "    string erase_key; cin >> erase_key;",
      "    mp.erase(erase_key);",
      "    for (auto &[k,v] : mp) cout << k << \" -> \" << v << '\\n';",
      "    return 0;",
      "}"
    ],
    "description": "Map insert, find, erase, print with input"
  },

  "Stack Basic": {
    "prefix": "stack.basic",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    stack<int> st;",
      "    while (n--)",
      "    {",
      "        string op; cin >> op;",
      "        if (op == \"push\")",
      "        {",
      "            int val; cin >> val;",
      "            st.push(val);",
      "        }",
      "        else if (op == \"pop\")",
      "        {",
      "            if (!st.empty()) st.pop();",
      "        }",
      "        else if (op == \"top\")",
      "        {",
      "            if (!st.empty()) cout << st.top() << '\\n';",
      "            else cout << \"Stack Empty\\n\";",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "Stack push/pop/top with input commands"
  },

  "Queue Basic": {
    "prefix": "queue.basic",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "signed main()",
      "{",
      "    ios::sync_with_stdio(false);",
      "    cin.tie(nullptr);",
      "    int n; cin >> n;",
      "    queue<int> q;",
      "    while (n--)",
      "    {",
      "        string op; cin >> op;",
      "        if (op == \"push\")",
      "        {",
      "            int val; cin >> val;",
      "            q.push(val);",
      "        }",
      "        else if (op == \"pop\")",
      "        {",
      "            if (!q.empty()) q.pop();",
      "        }",
      "        else if (op == \"front\")",
      "        {",
      "            if (!q.empty()) cout << q.front() << '\\n';",
      "            else cout << \"Queue Empty\\n\";",
      "        }",
      "        else if (op == \"back\")",
      "        {",
      "            if (!q.empty()) cout << q.back() << '\\n';",
      "            else cout << \"Queue Empty\\n\";",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "Queue push/pop/front/back with input commands"
  }
}





